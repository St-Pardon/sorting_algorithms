# 0x1B. C - Sorting algorithms & Big O

![](https://s3.amazonaws.com/intranet-projects-files/holbertonschool-low_level_programming/248/willy-wonka.png)



| Sort Algorithm | Description |
| :------ | :------------- |
| [Bubble Sort](./0-bubble_sort.c) | function that sorts an array of integers in ascending order using the [Bubble sort](https://alx-intranet.hbtn.io/rltoken/awhP8BhtkGi-lwmMc2-KAw) algorithm |
| [Insertion sort](./1-insertion_sort_list.c) | function that sorts a doubly linked list of integers in ascending order using the [Insertion sort](https://alx-intranet.hbtn.io/rltoken/GocxRKbPdsmERXeOHMCO2w) algorithm |
| [Selection sort](2-selection_sort.c) | function that sorts an array of integers in ascending order using the [Selection sort](https://alx-intranet.hbtn.io/rltoken/SEbg0fBEraioQcl-igvUSw) algorithm |
| [Quick Sort](./3-quick_sort.c) | function that sorts an array of integers in ascending order using the [Quick sort](function that sorts an array of integers in ascending order using the Quick sort algorithm) algorithm |
| [](./#include "sort.h"

/**
 * shell_sort - Sorts an array using the shell sort algorithm.
 * @array: The array to sort.
 * @size: The length of the array.
 */
void shell_sort(int *array, size_t size)
{
	int i, j, tmp, gap = 0;

	if ((array == NULL) || (size < 2))
		return;
	while (gap <= ((int)size / 3))
		gap = (gap * 3) + 1;
	for (; gap > 0; )
	{
		for (i = gap; i < (int)size; i++)
		{
			tmp = array[i];
			for (j = i; (j >= gap) && (array[j - gap] > tmp); j -= gap)
			{
				array[j] = array[j - gap];
			}
			array[j] = tmp;
		}
		gap = (gap - 1) / 3;
		print_array(array, size);
	}
)

- Bubble Sort

  - ![](<iframe width="560" height="315" src="https://www.youtube.com/embed/lyZQPjUT5B4" title="Bubble-sort with Hungarian ("Csángó") folk dance" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>)